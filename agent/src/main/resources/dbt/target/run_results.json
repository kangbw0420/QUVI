{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.0", "generated_at": "2025-09-02T02:21:14.368120Z", "invocation_id": "cd577bfb-8e99-48fa-a89e-f398181dc5eb", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-02T02:21:14.305753Z", "completed_at": "2025-09-02T02:21:14.312890Z"}, {"name": "execute", "started_at": "2025-09-02T02:21:14.313296Z", "completed_at": "2025-09-02T02:21:14.313311Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008520126342773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.webcash.aicfo_get_all_amt", "compiled": true, "compiled_code": "\n\nSelect\n    *\n\nFROM \"webcash\".\"public\".\"aicfo_get_all_amt\"", "relation_name": "\"webcash\".\"public\".\"aicfo_get_all_amt\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-02T02:21:14.315360Z", "completed_at": "2025-09-02T02:21:14.318273Z"}, {"name": "execute", "started_at": "2025-09-02T02:21:14.318584Z", "completed_at": "2025-09-02T02:21:14.318596Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004051685333251953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.webcash.aicfo_get_all_trsc", "compiled": true, "compiled_code": "\n\nSelect\n    *\n\nFROM \"webcash\".\"public\".\"aicfo_get_all_trsc\"", "relation_name": "\"webcash\".\"public\".\"aicfo_get_all_trsc\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-02T02:21:14.320259Z", "completed_at": "2025-09-02T02:21:14.362358Z"}, {"name": "execute", "started_at": "2025-09-02T02:21:14.362930Z", "completed_at": "2025-09-02T02:21:14.362951Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04549050331115723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.webcash.time_spine_daily", "compiled": true, "compiled_code": "\n\nwith\n\nbase_dates as (\n    \n\n\n    \n\n\n    with rawdata as (\n\n        \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 10958\n    order by generated_number\n\n\n\n    ),\n\n    all_periods as (\n\n        select (\n            \n\n    '2000-01-01' + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n        ) as date_day\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_day <= '2030-01-01'\n\n    )\n\n    select * from filtered\n\n\n),\n\nfinal as (\n    select\n        FORMAT(date_day, 'yyyyMMdd') as date_ymd\n    from base_dates\n)\n\nselect *\nfrom final\nwhere \n    CAST(date_ymd AS INT) > CAST(FORMAT(DATEADD(DAY, -365*5, GETDATE()), 'yyyyMMdd') AS INT)\n  and CAST(date_ymd AS INT) < CAST(FORMAT(DATEADD(DAY, 30, GETDATE()), 'yyyyMMdd') AS INT)", "relation_name": "\"webcash\".\"public\".\"time_spine_daily\"", "batch_results": null}], "elapsed_time": 0.2609391212463379, "args": {"print": true, "state_modified_compare_vars": false, "require_nested_cumulative_type_params": false, "log_path": "/home/daquv/src/qv_aicfo/agent/src/main/resources/dbt/logs", "quiet": false, "version_check": true, "which": "compile", "use_colors_file": true, "populate_cache": true, "state_modified_compare_more_unrendered_values": false, "static_parser": true, "select": [], "partial_parse": true, "vars": {}, "invocation_command": "dbt compile", "skip_nodes_if_on_run_start_fails": false, "warn_error_options": {"include": [], "exclude": []}, "defer": false, "inject_ephemeral_ctes": true, "use_colors": true, "strict_mode": false, "profiles_dir": "/home/daquv/src/qv_aicfo/agent/src/main/resources/dbt", "project_dir": "/home/daquv/src/qv_aicfo/agent/src/main/resources/dbt", "write_json": true, "printer_width": 80, "log_format_file": "debug", "log_level": "info", "log_format": "default", "require_yaml_configuration_for_mf_time_spines": false, "log_file_max_bytes": 10485760, "output": "text", "empty": false, "require_resource_names_without_spaces": false, "source_freshness_run_project_hooks": false, "cache_selected_only": false, "send_anonymous_usage_stats": true, "log_level_file": "debug", "macro_debugging": false, "require_batched_execution_for_custom_microbatch_strategy": false, "exclude": [], "favor_state": false, "require_explicit_package_overrides_for_builtin_materializations": true, "show_resource_report": false, "introspect": true, "indirect_selection": "eager", "partial_parse_file_diff": true}}